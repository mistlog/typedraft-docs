(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{153:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return l})),n.d(t,"metadata",(function(){return r})),n.d(t,"rightToc",(function(){return s})),n.d(t,"default",(function(){return d}));var a=n(2),o=n(10),i=(n(0),n(165)),l={id:"typedraft-in-5min",title:"TypeDraft in 5 minutes",sidebar_label:"TypeDraft in 5 minutes"},r={id:"typedraft-in-5min",isDocsHomePage:!0,title:"TypeDraft in 5 minutes",description:"Welcome to the TypeDraft docs!",source:"@site/docs/typedraft-in-5min.md",permalink:"/typedraft-docs/docs/",editUrl:"https://github.com/mistlog/typedraft-docs/edit/master/docs/typedraft-in-5min.md",sidebar_label:"TypeDraft in 5 minutes",sidebar:"docs",next:{title:"JSX as Macro",permalink:"/typedraft-docs/docs/jsx-as-macro"}},s=[{value:"Installing TypeDraft",id:"installing-typedraft",children:[]},{value:"Build your first TypeDraft file",id:"build-your-first-typedraft-file",children:[{value:"Transcribe",id:"transcribe",children:[]},{value:"Method Addition",id:"method-addition",children:[]},{value:"DSL",id:"dsl",children:[]}]}],c={rightToc:s};function d(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"Welcome to the TypeDraft docs!"),Object(i.b)("p",null,"TypeDraft is a superset of typescript with built-in support for DSL extension and literate programming."),Object(i.b)("p",null,"TypeDraft transcribes to readable TypeScript, and you can try it out at the ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://mistlog.github.io/typedraft-playground/"}),"playground"),"."),Object(i.b)("h2",{id:"installing-typedraft"},"Installing TypeDraft"),Object(i.b)("p",null,"You can install it globally:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-shell"}),"> npm i -g typedraft\n")),Object(i.b)("h2",{id:"build-your-first-typedraft-file"},"Build your first TypeDraft file"),Object(i.b)("p",null,"In your editor, type the following typescript code in ",Object(i.b)("inlineCode",{parentName:"p"},"demo.tsx"),":"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript",metastring:'title="demo.tsx"',title:'"demo.tsx"'}),'export function Main() {\n  console.log("hello from main");\n  <ContextA/>;\n}\n\nfunction ContextA() {\n  console.log("hello from context A");\n}\n')),Object(i.b)("p",null,"As typedraft is a superset of typescript, you still write typescript here, but in a slightly different way. The function declaration ",Object(i.b)("inlineCode",{parentName:"p"},"ContextA")," here is not used to declare a function, instead, it will be used as JSX element and get expanded after code transformation."),Object(i.b)("h3",{id:"transcribe"},"Transcribe"),Object(i.b)("p",null,"At the command line, run the CLI tool(td: typedraft):"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-shell"}),"> td ./demo.tsx\n")),Object(i.b)("p",null,"The result will be a file ",Object(i.b)("inlineCode",{parentName:"p"},"demo.ts")," which contains valid and readable typescript code:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts",metastring:'title="demo.ts"',title:'"demo.ts"'}),'export function Main() {\n  console.log("hello from main");\n  console.log("hello from context A");\n}\n')),Object(i.b)("p",null,"You can treat this feature as some kind of macro, the difference is that we don't manipulate string, instead, we transform AST."),Object(i.b)("h3",{id:"method-addition"},"Method Addition"),Object(i.b)("p",null,"To support literate programming, we need to figure out a way to reorder code. Method addition is the way to reorder method of class."),Object(i.b)("p",null,"In your editor, type the following typescript code:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts",metastring:'title="demo.tsx"',title:'"demo.tsx"'}),'export class ClassTest { }\n\n\n/**\n * put important method first\n */  \n<ClassTest /> +\n    function ImportMethodA()\n    {\n        console.log("in important method");\n    };\n\n\n/**\n * trivial\n */  \n<ClassTest /> +\n    function constructor()\n    {\n        <TrivialInitialization />;\n    };\n\nfunction TrivialInitialization() {\n    console.log("in trivial init");\n}\n')),Object(i.b)("p",null,"transcribe it and get:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts",metastring:'title="demo.ts"',title:'"demo.ts"'}),'export class ClassTest {\n  ImportMethodA() {\n    console.log("in important method");\n  }\n\n  constructor() {\n    console.log("in trivial init");\n  }\n\n}\n')),Object(i.b)("h3",{id:"dsl"},"DSL"),Object(i.b)("p",null,"Take ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/mistlog/draft-dsl-match/tree/develop"}),"draft-dsl-match")," as an example, we can get limited pattern match support from it."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-shell"}),"> git clone https://github.com/mistlog/dsl-match-demo.git\n> cd dsl-match-demo\n> npm install\n> npm run build\n")),Object(i.b)("p",null,"In this demo project, we have code in ",Object(i.b)("inlineCode",{parentName:"p"},"src/demo.tsx"),":"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts",metastring:'title="src/demo.tsx"',title:'"src/demo.tsx"'}),'export function Main(value: any) {\n    {\n        "use match";\n\n        (value: 1) => <HandleValueIsNumber />;\n        (value: "a" | "b" | "c") => console.log("value is ...");\n        () => console.log("default here");\n    }\n}\n\nfunction HandleValueIsNumber() {\n    console.log("value is 1");\n}\n')),Object(i.b)("p",null,"transcribe it and get:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts",metastring:'title="src/demo.ts"',title:'"src/demo.ts"'}),'export function Main(value: any) {\n  if (value === 1) {\n    console.log("value is 1");\n  } else if (value === "a" || value === "b" || value === "c") {\n    console.log("value is ...");\n  } else {\n    console.log("default here");\n  }\n}\n')),Object(i.b)("p",null,"That's the basics of typedraft, for more examples of what\u2019s possible in TypeDraft, see the Handbook section of the website."))}d.isMDXComponent=!0}}]);