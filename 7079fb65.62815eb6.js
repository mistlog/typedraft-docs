(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{149:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return l})),n.d(t,"rightToc",(function(){return s})),n.d(t,"default",(function(){return c}));var a=n(2),r=n(9),i=(n(0),n(166)),o={id:"implement-a-dsl",title:"Implement a DSL",sidebar_label:"Implement a DSL"},l={id:"implement-a-dsl",isDocsHomePage:!1,title:"Implement a DSL",description:"What Are We Building?",source:"@site/docs/implement-a-dsl.md",permalink:"/typedraft-docs/docs/implement-a-dsl",editUrl:"https://github.com/mistlog/typedraft-docs/edit/master/docs/implement-a-dsl.md",sidebar_label:"Implement a DSL",sidebar:"docs",previous:{title:"Literate Programming",permalink:"/typedraft-docs/docs/literate-programming"}},s=[{value:"What Are We Building?",id:"what-are-we-building",children:[]},{value:"Show Me The Code",id:"show-me-the-code",children:[]},{value:"Learn About AST",id:"learn-about-ast",children:[]}],b={rightToc:s};function c(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},b,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h2",{id:"what-are-we-building"},"What Are We Building?"),Object(i.b)("p",null,"In this tutorial, we\u2019ll show how to build a DSL with typedraft."),Object(i.b)("p",null,"You can see what we\u2019ll be building here: ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/mistlog/dsl-debug-demo"}),"dsl-debug-demo"),". We recommend that you check out the repo before continuing with the tutorial."),Object(i.b)("p",null,"This DSL allows you to write code such as: "),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts",metastring:'title="src/demo.tsx"',title:'"src/demo.tsx"'}),'let value = 1;\n\n{\n    "use debug";\n    console.log(`[Debug]: value is ${value}`);\n} \n')),Object(i.b)("p",null,"and when you build the project using ",Object(i.b)("inlineCode",{parentName:"p"},"npm run build"),", ",Object(i.b)("inlineCode",{parentName:"p"},"NODE_ENV")," is set to ",Object(i.b)("inlineCode",{parentName:"p"},"production")," so that this block of code will be removed:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts",metastring:'title="src/demo.ts"',title:'"src/demo.ts"'}),"let value = 1;\n")),Object(i.b)("p",null,"if you use ",Object(i.b)("inlineCode",{parentName:"p"},"npm run dev"),", ",Object(i.b)("inlineCode",{parentName:"p"},"NODE_ENV")," will be ",Object(i.b)("inlineCode",{parentName:"p"},"dev"),", and you will get:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts",metastring:'title="src/demo.ts"',title:'"src/demo.ts"'}),"let value = 1;\nconsole.log(`[Debug]: value is ${value}`);\n")),Object(i.b)("p",null,'After this tutorial, you can implement your own dsl, for example, you can implement "dev" and "production":'),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts",metastring:'title="src/demo.tsx"',title:'"src/demo.tsx"'}),'let url: string = "";\n{\n    "use dev";\n    url = ... // address in test environment \n}\n\n{\n    "use production";\n    url = ... // address in production environment\n}\n')),Object(i.b)("h2",{id:"show-me-the-code"},"Show Me The Code"),Object(i.b)("p",null,"The interface of a DSL is: "),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"export interface IDSL {\n    Transcribe(block: Array<Statement>): Array<Statement>;\n}\n")),Object(i.b)("p",null,"A DSL takes an array of ",Object(i.b)("inlineCode",{parentName:"p"},"Statement"),", and return another array of ",Object(i.b)("inlineCode",{parentName:"p"},"Statement"),". In this demo:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts",metastring:'title="typedraft.config.ts" {10-20}',title:'"typedraft.config.ts"',"{10-20}":!0}),'class Debug implements IDSL {\n    m_Merge?: boolean;\n    m_Env: string;\n\n    constructor(option: { merge: boolean, env: string }) {\n        this.m_Merge = option?.merge;\n        this.m_Env = option?.env;\n    }\n\n    Transcribe(block: Array<Statement>): Array<Statement> {\n        if (this.m_Env === "dev") {\n            const [use_dsl, ...rest] = block;\n            return rest;\n        }\n        else if (this.m_Env === "production") {\n            return [];\n        }\n\n        throw new Error(`invalid env: ${this.m_Env}, please use dev or production`);\n    }\n}\n')),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"NODE_ENV")," is passed in constructor, thus we can use it in ",Object(i.b)("inlineCode",{parentName:"p"},"Transcribe")," to decide statements to return."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts",metastring:'title="typedraft.config.ts" {5}',title:'"typedraft.config.ts"',"{5}":!0}),'export default {\n    DSLs: [\n        {\n            name: "debug",\n            dsl: () => new Debug({ merge: true, env: process.env.NODE_ENV || "dev" })\n        }\n    ]\n}\n')),Object(i.b)("p",null,"If we are in ",Object(i.b)("inlineCode",{parentName:"p"},"dev")," mode, we will remove just the statement ",Object(i.b)("inlineCode",{parentName:"p"},"use debug"),' by only returning "the rest of" original statements. When in ',Object(i.b)("inlineCode",{parentName:"p"},"production"),", we will remove all statements by returning an empty array."),Object(i.b)("h2",{id:"learn-about-ast"},"Learn About AST"),Object(i.b)("p",null,"We use ",Object(i.b)("inlineCode",{parentName:"p"},"babel")," to transform code, and the ",Object(i.b)("inlineCode",{parentName:"p"},"Statement")," type comes from ",Object(i.b)("inlineCode",{parentName:"p"},"@babel/types"),". So the prerequisite of implementing a DSL is that you have basic knowledge of babel AST. "),Object(i.b)("p",null,"Reference material can be found in ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/jamiebuilds/babel-handbook/blob/master/translations/en/plugin-handbook.md"}),"Babel Plugin Handbook"),"."))}c.isMDXComponent=!0}}]);