(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{156:function(t,e,n){"use strict";n.r(e),n.d(e,"frontMatter",(function(){return i})),n.d(e,"metadata",(function(){return c})),n.d(e,"rightToc",(function(){return l})),n.d(e,"default",(function(){return p}));var r=n(2),o=n(9),a=(n(0),n(166)),i={id:"typedraft-in-5min",title:"TypeDraft in 5 minutes",sidebar_label:"TypeDraft in 5 minutes"},c={id:"typedraft-in-5min",isDocsHomePage:!0,title:"TypeDraft in 5 minutes",description:"Welcome to the TypeDraft docs!",source:"@site/docs/typedraft-in-5min.md",permalink:"/typedraft-docs/docs/",editUrl:"https://github.com/mistlog/typedraft-docs/edit/master/docs/typedraft-in-5min.md",sidebar_label:"TypeDraft in 5 minutes",sidebar:"docs",next:{title:"JSX as Macro",permalink:"/typedraft-docs/docs/jsx-as-macro"}},l=[{value:"Installing TypeDraft",id:"installing-typedraft",children:[]},{value:"Build your first TypeDraft file",id:"build-your-first-typedraft-file",children:[{value:"Transcribe",id:"transcribe",children:[]},{value:"Method Addition",id:"method-addition",children:[]},{value:"DSL",id:"dsl",children:[]}]}],s={rightToc:l};function p(t){var e=t.components,n=Object(o.a)(t,["components"]);return Object(a.b)("wrapper",Object(r.a)({},s,n,{components:e,mdxType:"MDXLayout"}),Object(a.b)("p",null,"Welcome to the TypeDraft docs!"),Object(a.b)("p",null,"TypeDraft is a superset of typescript with built-in support for DSL extension and literate programming."),Object(a.b)("p",null,"TypeDraft transcribes to readable TypeScript, and you can try it out at the ",Object(a.b)("a",Object(r.a)({parentName:"p"},{href:"https://mistlog.github.io/typedraft-playground/"}),"playground"),"."),Object(a.b)("h2",{id:"installing-typedraft"},"Installing TypeDraft"),Object(a.b)("p",null,"You can install it globally:"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-shell"}),"> npm i -g typedraft@0.2.5\n")),Object(a.b)("h2",{id:"build-your-first-typedraft-file"},"Build your first TypeDraft file"),Object(a.b)("p",null,"In your editor, type the following typescript code in ",Object(a.b)("inlineCode",{parentName:"p"},"demo.tsx"),":"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-typescript",metastring:'title="demo.tsx"',title:'"demo.tsx"'}),'export function Main() {\n  console.log("hello from main");\n  <ContextA />;\n}\n\nfunction ContextA() {\n  console.log("hello from context A");\n}\n')),Object(a.b)("p",null,"As typedraft is a superset of typescript, you still write typescript here, but in a slightly different way. The function declaration ",Object(a.b)("inlineCode",{parentName:"p"},"ContextA")," here is not used to declare a function, instead, it will be used as JSX element and get expanded after code transformation."),Object(a.b)("h3",{id:"transcribe"},"Transcribe"),Object(a.b)("p",null,"At the command line, run the CLI tool(td: typedraft):"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-shell"}),"> td ./demo.tsx\n")),Object(a.b)("p",null,"The result will be a file ",Object(a.b)("inlineCode",{parentName:"p"},"demo.ts")," which contains valid and readable typescript code:"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ts",metastring:'title="demo.ts"',title:'"demo.ts"'}),'export function Main() {\n  console.log("hello from main");\n  console.log("hello from context A");\n}\n')),Object(a.b)("p",null,"You can treat this feature as some kind of macro, the difference is that we don't manipulate string, instead, we transform AST."),Object(a.b)("h3",{id:"method-addition"},"Method Addition"),Object(a.b)("p",null,"To support literate programming, we need to figure out a way to reorder code. Method addition is the way to reorder method of class."),Object(a.b)("p",null,"In your editor, type the following typescript code:"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ts",metastring:'title="demo.tsx"',title:'"demo.tsx"'}),'export class ClassTest {}\n\n\n/**\n * put important method first\n */\n<ClassTest /> +\n  function ImportMethodA() {\n    console.log("in important method");\n  };\n\n\n/**\n * trivial\n */\n<ClassTest /> +\n  function constructor() {\n    <TrivialInitialization />;\n  };\n\nfunction TrivialInitialization() {\n  console.log("in trivial init");\n}\n')),Object(a.b)("p",null,"transcribe it and get:"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ts",metastring:'title="demo.ts"',title:'"demo.ts"'}),'export class ClassTest {\n  ImportMethodA() {\n    console.log("in important method");\n  }\n\n  constructor() {\n    console.log("in trivial init");\n  }\n}\n')),Object(a.b)("h3",{id:"dsl"},"DSL"),Object(a.b)("p",null,"Take ",Object(a.b)("a",Object(r.a)({parentName:"p"},{href:"https://github.com/mistlog/draft-dsl-match/tree/develop"}),"draft-dsl-match")," as an example, we can get full support of pattern match from it."),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-shell"}),"> git clone https://github.com/mistlog/dsl-match-demo.git\n> cd dsl-match-demo\n> npm install\n> npm run build\n")),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},"This project can also be used as template project for typedraft.")),Object(a.b)("p",null,"In this demo project, we have code in ",Object(a.b)("inlineCode",{parentName:"p"},"src/vector.tsx"),":"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ts",metastring:'title="src/vector.tsx"',title:'"src/vector.tsx"'}),'import { MatchDSL } from "draft-dsl-match";\n\ntype Vector1 = { x: number };\ntype Vector2 = { x: number; y: number };\ntype Vector3 = {\n  x: number;\n  y: number;\n  z: number;\n};\ntype Vector = Vector1 | Vector2 | Vector3;\n\nconst vector: Vector = { x: 1 };\nconst result = \u039b<string>("match")` ${vector as Vector} \n  ${{ x: 1, y: 1, z: 1 }} -> ${"vector3"}\n  ${{ x: 2, y: 1 }} -> ${"vector2"}\n  ${{ x: 1 }} -> ${"vector1"}`;\n\nconsole.log(result);\n')),Object(a.b)("p",null,"transcribe it and get:"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ts",metastring:'title="src/vector.ts"',title:'"src/vector.ts"'}),'import { MatchDSL } from "draft-dsl-match";\ntype Vector1 = {\n  x: number;\n};\ntype Vector2 = {\n  x: number;\n  y: number;\n};\ntype Vector3 = {\n  x: number;\n  y: number;\n  z: number;\n};\ntype Vector = Vector1 | Vector2 | Vector3;\nconst vector: Vector = {\n  x: 1,\n};\nconst result = MatchDSL<Vector, string>(vector)\n  .with(\n    {\n      x: 1,\n      y: 1,\n      z: 1,\n    },\n    () => "vector3"\n  )\n  .with(\n    {\n      x: 2,\n      y: 1,\n    },\n    () => "vector2"\n  )\n  .with(\n    {\n      x: 1,\n    },\n    () => "vector1"\n  )\n  .run();\nconsole.log(result);\n')),Object(a.b)("p",null,"That's the basics of typedraft, for more examples of what\u2019s possible in TypeDraft, see the Handbook in this site."))}p.isMDXComponent=!0}}]);