(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{153:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return l})),n.d(t,"metadata",(function(){return r})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return p}));var o=n(2),i=n(10),a=(n(0),n(165)),l={id:"typedraft-in-5min",title:"TypeDraft in 5 minutes",sidebar_label:"TypeDraft in 5 minutes"},r={id:"typedraft-in-5min",isDocsHomePage:!0,title:"TypeDraft in 5 minutes",description:"Welcome to the TypeDraft docs!",source:"@site/docs/typedraft-in-5min.md",permalink:"/typedraft-docs/docs/",editUrl:"https://github.com/mistlog/typedraft-docs/edit/master/docs/typedraft-in-5min.md",sidebar_label:"TypeDraft in 5 minutes",sidebar:"someSidebar",next:{title:"Concepts",permalink:"/typedraft-docs/docs/concepts"}},c=[{value:"Installing TypeDraft",id:"installing-typedraft",children:[]},{value:"Build your first TypeDraft file",id:"build-your-first-typedraft-file",children:[]},{value:"Transcribe",id:"transcribe",children:[]},{value:"Method Addition",id:"method-addition",children:[]}],s={rightToc:c};function p(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(a.b)("wrapper",Object(o.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("p",null,"Welcome to the TypeDraft docs!"),Object(a.b)("p",null,"TypeDraft is a superset of typescript with built-in support for DSL extension and literate programming. TypeDraft transcribes to readable TypeScript, and you can try it out at the ",Object(a.b)("a",Object(o.a)({parentName:"p"},{href:"https://mistlog.github.io/typedraft-playground/"}),"playground"),"."),Object(a.b)("h2",{id:"installing-typedraft"},"Installing TypeDraft"),Object(a.b)("p",null,"You can install it globally:"),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-shell"}),"npm i -g typedraft\n")),Object(a.b)("h2",{id:"build-your-first-typedraft-file"},"Build your first TypeDraft file"),Object(a.b)("p",null,"In your editor, type the following typescript code in demo.tsx:"),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-typescript"}),'export function Main() {\n  console.log("hello from main");\n  <ContextA/>;\n}\n\nfunction ContextA() {\n  console.log("hello from context A");\n}\n')),Object(a.b)("p",null,"As typedraft is a superset of typescript, you still write typescript here, but in a slightly different way."),Object(a.b)("p",null,"The function declaration ",Object(a.b)("inlineCode",{parentName:"p"},"ContextA")," here is not used to declare a function, instead, it's used to denote a ",Object(a.b)("inlineCode",{parentName:"p"},"local context"),"."),Object(a.b)("p",null,"Local context is used as standalone JSX element. All statements in a local context will be processed and put in the place of JSX element. This step of transform is called transcription."),Object(a.b)("h2",{id:"transcribe"},"Transcribe"),Object(a.b)("p",null,"At the command line, run the CLI tool(td: typedraft):"),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-shell"}),"> td ./demo.tsx\n")),Object(a.b)("p",null,"The result will be a file ",Object(a.b)("inlineCode",{parentName:"p"},"demo.ts")," which contains valid and readable typescript code:"),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-typescript"}),'export function Main() {\n  console.log("hello from main");\n  console.log("hello from context A");\n}\n')),Object(a.b)("p",null,"In the example of ",Object(a.b)("a",Object(o.a)({parentName:"p"},{href:"https://github.com/mistlog/algorithm/blob/master/source-view/linear-list/polynomial-addition.md"}),"polynomial addtion algorithm"),", we use local context to sketch the skeleton of algorithm and keep the logic clear and concise."),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-typescript"}),"<Polynomial /> +\n    function Add(this: Polynomial, another: Polynomial) {\n        const P = this.m_Items;\n        const Q = [...another.m_Items];\n        let p = 0;\n        let q = 0;\n        for (;;) {\n            if (P[p].m_Exponential < Q[q].m_Exponential) {\n                <MoveToNextItemOfQ />;\n            } else if (P[p].m_Exponential === Q[q].m_Exponential) {\n                <CheckIfFinishedAndReturn />;\n                <AddCoefficients />;\n            } else if (P[p].m_Exponential > Q[q].m_Exponential) {\n                <InsertNewItem />;\n            }\n        }\n    };\n")),Object(a.b)("p",null,"The syntax ",Object(a.b)("inlineCode",{parentName:"p"},"JSX + function declaration")," is used to denote ",Object(a.b)("inlineCode",{parentName:"p"},"method addition"),"."),Object(a.b)("h2",{id:"method-addition"},"Method Addition"),Object(a.b)("p",null,"To support literate programming, we need to figure out a way to reorder code. Method addition is a convention to reorder method of class."),Object(a.b)("p",null,"In your editor, type the following typescript code:"),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-typescript"}),'export class ClassTest { }\n\n/*\nput important method first\n*/\n<ClassTest /> +\n    function ImportMethodA()\n    {\n        console.log("in important method");\n    };\n\n/*\ntrivial\n*/\n<ClassTest /> +\n    function constructor()\n    {\n        <TrivialInitialization />;\n    };\n\nfunction TrivialInitialization()\n{\n    console.log("in trivial init");\n}\n')),Object(a.b)("p",null,"transcribe it and get:"),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-typescript"}),'export class ClassTest {\n  ImportMethodA() {\n    console.log("in important method");\n  }\n\n  constructor() {\n    console.log("in trivial init");\n  }\n\n}\n')),Object(a.b)("p",null,"That's the basic of typedraft, for more details, see ",Object(a.b)("a",Object(o.a)({parentName:"p"},{href:"../concepts/concepts.md"}),"concepts"),"."))}p.isMDXComponent=!0}}]);